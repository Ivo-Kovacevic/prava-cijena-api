// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Database;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mliječni proizvodi i jaja",
                            Slug = "mlijecni-proizvodi-i-jaja",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mlijeko",
                            ParentCategoryId = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            Slug = "mlijeko",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7b3a5662-d9f6-48ad-b6ea-6fce8c92715a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jaja",
                            ParentCategoryId = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            Slug = "jaja",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aad5b759-df12-4937-a1f5-91c30a0f4e90"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sirevi",
                            ParentCategoryId = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            Slug = "sirevi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aa4c9e5f-3e8b-4d99-a04e-dadfe2a5e10e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jogurti",
                            ParentCategoryId = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            Slug = "jogurti",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b625a4f2-533b-4a33-822b-488457325b5d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maslac",
                            ParentCategoryId = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            Slug = "maslac",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0d4667bc-9675-4e55-8d3c-6f4763f053b2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sladoledi",
                            ParentCategoryId = new Guid("f5a5d762-7a8f-4a8e-8f30-d9f4db59b7f0"),
                            Slug = "sladoledi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f91a4d2c-dbe7-42ad-a3cd-7d2a0f557ec6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Povrće",
                            Slug = "povrce",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("12c593c9-2fc2-4ef6-b537-9ed6a95f2e96"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Voće",
                            Slug = "voce",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("17e63574-d2b8-4a74-b94d-3210fc0b4186"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Meso",
                            Slug = "meso",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e9e34ab3-1bdb-4005-9508-d084071f5850"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Svinjsko meso",
                            ParentCategoryId = new Guid("17e63574-d2b8-4a74-b94d-3210fc0b4186"),
                            Slug = "svinjsko-meso",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5a16ab3e-05ae-4679-9d96-77f0db2c47a3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Perad",
                            ParentCategoryId = new Guid("17e63574-d2b8-4a74-b94d-3210fc0b4186"),
                            Slug = "perad",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("742ff5e3-92e6-4a89-8d77-d49a4e92065c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Govedina",
                            ParentCategoryId = new Guid("17e63574-d2b8-4a74-b94d-3210fc0b4186"),
                            Slug = "govedina",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ac3b0d3-d60e-4979-8886-94b43f194e28"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Plodovi mora",
                            ParentCategoryId = new Guid("17e63574-d2b8-4a74-b94d-3210fc0b4186"),
                            Slug = "plodovi-mora",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("91ac1be2-b97c-47ed-902d-712a96d8b0f0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pića",
                            Slug = "pica",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5de62c74-fb47-468a-b56d-5d9d38208039"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kava",
                            ParentCategoryId = new Guid("91ac1be2-b97c-47ed-902d-712a96d8b0f0"),
                            Slug = "kava",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("41da84c7-0196-4bde-8e0c-bd20688e6e63"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Čaj",
                            ParentCategoryId = new Guid("91ac1be2-b97c-47ed-902d-712a96d8b0f0"),
                            Slug = "caj",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7f4d2586-e464-4b18-9e4f-d4b38c553295"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gazirana pića",
                            ParentCategoryId = new Guid("91ac1be2-b97c-47ed-902d-712a96d8b0f0"),
                            Slug = "gazirana-pica",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a3f95625-4ec1-4222-8cdc-b491c4356f9c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alkoholna pića",
                            ParentCategoryId = new Guid("91ac1be2-b97c-47ed-902d-712a96d8b0f0"),
                            Slug = "alkoholna-pica",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("api.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug");

                    b.ToTable("Labels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd54d494-4e7f-4a36-ac2b-0c5b47f1c96b"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vrsta mlijeka",
                            Slug = "vrsta-mlijeka",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2ce02301-83c2-4fb7-8397-185a4ea2e78b"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trajnost mlijeka",
                            Slug = "trajnost-mlijeka",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("43b33b76-69cc-4424-8608-eeb20f931476"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mliječna masnoća",
                            Slug = "mlijecna-masnoca",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf131788-50bf-413a-94c2-92c8b1de1acf"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proizvođač",
                            Slug = "proizvoac",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("api.Models.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ProductStoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Amount");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04133ce5-7349-443d-afb6-83b6a4dc99ed"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Dukat Svježe mlijeko 3,2% m.m. 1 l",
                            Slug = "dukat-svjeze-mlijeko-3-2-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("695f806c-048e-4858-a49a-bfd8c34932af"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Z bregov Svježe mlijeko 3,2% m.m. 1,75 l",
                            Slug = "z-bregov-svjeze-mlijeko-3-2-m-m-1-75-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("839cf81b-29d6-4397-8244-aaed755428ca"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Dukat Lagano jutro Trajno mlijeko bez laktoze 1,5% m.m 1 l",
                            Slug = "dukat-lagano-jutro-trajno-mlijeko-bez-laktoze-1-5-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("90be72d4-0f10-41e7-9e95-944fbcebc898"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "K Plus Trajno mlijeko 2,8% m.m. 1 l",
                            Slug = "k-plus-trajno-mlijeko-2-8-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a6d6f654-2551-41ea-af85-f9b976852d20"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Z bregov Mlijeko bez laktoze 2,8% m.m. 1 l",
                            Slug = "z-bregov-mlijeko-bez-laktoze-2-8-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4cc38c19-b4da-4708-a582-dc1852dacb30"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Belje Kravica Kraljica Trajno mlijeko 2,8% m.m. 1 l",
                            Slug = "belje-kravica-kraljica-trajno-mlijeko-2-8-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("faf662d0-7006-41a7-9000-96895f8912a4"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Dukat Trajno mlijeko 2,8% m.m. 1 l",
                            Slug = "dukat-trajno-mlijeko-2-8-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a3e14b35-f6d5-4f6c-b0f4-18fa798a0e9d"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Alpsko Trajno mlijeko 3,5% m.m. 1 l",
                            Slug = "alpsko-trajno-mlijeko-3-5-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0f2b8014-346d-4585-a68d-a2683e9f7ace"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Z bregov Trajno mlijeko 0,9% m.m. 1 l",
                            Slug = "z-bregov-trajno-mlijeko-0-9-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("46e4e5b5-1ac4-4c56-a816-424757676beb"),
                            CategoryId = new Guid("2d15ec67-b47b-4756-bc7b-e7a4e4f1232f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = " Z bregov Svježe mlijeko 3,2% m.m. 1 l",
                            Slug = "z-bregov-svjeze-mlijeko-3-2-m-m-1-l",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7f8aadfd-1c53-4f68-b6f6-216091111261"),
                            CategoryId = new Guid("aa4c9e5f-3e8b-4d99-a04e-dadfe2a5e10e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "b Aktiv LGG jogurt 2,4% m.m. 1 kg",
                            Slug = "b-aktiv-lgg-jogurt-2-4-m-m-1-kg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7bc71537-30ec-4122-b44b-73d1cf9da71c"),
                            CategoryId = new Guid("aa4c9e5f-3e8b-4d99-a04e-dadfe2a5e10e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Dukat Tekući jogurt 2,8% m.m. 1 kg",
                            Slug = "dukat-tekuci-jogurt-2-8-m-m-1-kg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("559388ed-55f8-4a0d-bd49-76615bda30ab"),
                            CategoryId = new Guid("aa4c9e5f-3e8b-4d99-a04e-dadfe2a5e10e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "Dukatos Grčki tip jogurta 150 g",
                            Slug = "dukatos-grcki-tip-jogurta-150-g",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f5efe512-7e4b-4fe6-9a7c-4001b70b945e"),
                            CategoryId = new Guid("aa4c9e5f-3e8b-4d99-a04e-dadfe2a5e10e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://dukatshop.hr/965-thickbox_default/dukat-svjeze-mlijeko-32-mm-1-l.jpg",
                            Name = "b Aktiv LGG Jogurt 2,4% m.m. natur 330 g",
                            Slug = "b-aktiv-lgg-jogurt-2-4-m-m-natur-330-g",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("api.Models.ProductStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("LatestPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductStores");
                });

            modelBuilder.Entity("api.Models.ProductValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ValueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ValueId");

                    b.ToTable("ProductValues");
                });

            modelBuilder.Entity("api.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoreUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("api.Models.Value", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("Slug");

                    b.ToTable("Values");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ce02301-83c2-4fb7-8397-185a4ea2e78c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("cd54d494-4e7f-4a36-ac2b-0c5b47f1c96b"),
                            Name = "Kravlje mlijeko",
                            Slug = "kravlje-mlijeko",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2ce02301-83c2-4fb7-8397-185a4ea2e78d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("cd54d494-4e7f-4a36-ac2b-0c5b47f1c96b"),
                            Name = "Kozje mlijeko",
                            Slug = "kozje-mlijeko",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("43b33b76-69cc-4424-8608-eeb20f931477"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("2ce02301-83c2-4fb7-8397-185a4ea2e78b"),
                            Name = "Svježe mlijeko",
                            Slug = "svjeze-mlijeko",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("95e493da-1772-4be5-8038-250a5453c2bb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("2ce02301-83c2-4fb7-8397-185a4ea2e78b"),
                            Name = "Trajno mlijeko",
                            Slug = "trajno-mlijeko",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf131788-50bf-413a-94c2-92c8b1de1adf"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("43b33b76-69cc-4424-8608-eeb20f931476"),
                            Name = "do 1%",
                            Slug = "do-1",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b93dc567-d6d3-4dae-b3bd-9a4b990a5f6b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("43b33b76-69cc-4424-8608-eeb20f931476"),
                            Name = "1% do 2%",
                            Slug = "1-do-2",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bb601c25-43f5-403b-8ec1-92c470ec35e5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("43b33b76-69cc-4424-8608-eeb20f931476"),
                            Name = "2% do 3%",
                            Slug = "2-do-3",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("48923d87-1b7e-4121-9f87-023e71712203"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("43b33b76-69cc-4424-8608-eeb20f931476"),
                            Name = "iznad 3%",
                            Slug = "iznad-3",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d813d858-809f-49e2-8f87-2b69b37b194b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("bf131788-50bf-413a-94c2-92c8b1de1acf"),
                            Name = "Dukat",
                            Slug = "dukat",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e4006d51-2e28-46be-8747-159956b6fdbb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("bf131788-50bf-413a-94c2-92c8b1de1acf"),
                            Name = "z bregov",
                            Slug = "z-bregov",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2a99e355-fcf1-46c8-8b5b-019bdbfc99de"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabelId = new Guid("bf131788-50bf-413a-94c2-92c8b1de1acf"),
                            Name = "Moja kravica",
                            Slug = "moja-kravica",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.HasOne("api.Models.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("api.Models.Label", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Labels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.Price", b =>
                {
                    b.HasOne("api.Models.ProductStore", "ProductStore")
                        .WithMany("Prices")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.ProductStore", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany("ProductStores")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("api.Models.ProductValue", b =>
                {
                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Value", "Value")
                        .WithMany("ValueProducts")
                        .HasForeignKey("ValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("api.Models.Value", b =>
                {
                    b.HasOne("api.Models.Label", "Label")
                        .WithMany("Values")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Label");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("api.Models.Label", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("ProductStores");
                });

            modelBuilder.Entity("api.Models.ProductStore", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("api.Models.Store", b =>
                {
                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("api.Models.Value", b =>
                {
                    b.Navigation("ValueProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
